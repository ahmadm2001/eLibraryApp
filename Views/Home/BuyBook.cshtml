@model IEnumerable<eLibraryApp.Models.Book>

@{
    ViewData["Title"] = "Checkout";
    var totalAmount = Model.Sum(book => book.IsDiscountActive && book.DiscountedPrice.HasValue
        ? book.DiscountedPrice.Value
        : book.BuyPrice);
}

<div class="container py-5">
    <h2 class="text-center mb-4">Checkout</h2>
    <div class="row">
        <!-- Order Summary -->
        <div class="col-lg-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Order Summary</h5>
                </div>
                <div class="card-body">
                    <table class="table table-borderless align-middle">
                        <thead>
                            <tr>
                                <th>Item</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var book in Model)
                            {
                                var price = book.IsDiscountActive && book.DiscountedPrice.HasValue
                                ? book.DiscountedPrice.Value
                                : book.BuyPrice;
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <img src="@book.CoverImageUrl" alt="Cover" class="img-thumbnail me-3" style="width: 50px;" />
                                            <span>@book.Title</span>
                                        </div>
                                    </td>
                                    <td>@price.ToString("C")</td>
                                    <td>1</td>
                                    <td>@price.ToString("C")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Payment Section -->
        <div class="col-lg-4">
            <div class="card shadow-lg border-0">
                <div class="card-body text-center">
                    <h2 class="mb-4" style="font-weight: bold; color: #2c3e50;">Confirm Purchase</h2>
                    <p style="font-size: 1.1rem; color: #34495e;">
                        Your total amount is:
                        <span style="color: #27ae60; font-weight: bold;">@totalAmount.ToString("C")</span>
                    </p>
                    <div id="paypal-btn"></div>
                    <form method="post" asp-action="CompleteOrder" class="mt-4">
                        <button type="submit" class="btn btn-success px-4 me-2">Order Completed</button>
                        <a href="@Url.Action("Cart", "Home")" class="btn btn-secondary px-4">Cancel</a>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://www.paypalobjects.com/api/checkout.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        let total = @Html.Raw(totalAmount);

        // PayPal Button Rendering
        paypal.Button.render({
            env: 'sandbox', // Use 'sandbox' for testing
            client: {
                sandbox: 'YOUR_PAYPAL_SANDBOX_CLIENT_ID', // Replace with your sandbox client ID
            },
            style: {
                size: 'small',
                color: 'gold',
                shape: 'pill'
            },
            commit: true,
            payment: function (data, actions) {
                return actions.payment.create({
                    transactions: [{
                        amount: {
                            total: total,
                            currency: 'USD'
                        }
                    }]
                });
            },
            onAuthorize: function (data, actions) {
                return actions.payment.execute().then(function () {
                    alert('Successfully bought the book!');
                    window.location.href = '@Url.Action("CompleteOrder", "Orders")';
                });
            },
            onCancel: function (data) {
                alert('Payment was canceled.');
            },
            onError: function (err) {
                alert('An error occurred during payment.');
                console.error(err);
            }
        }, '#paypal-btn');
    });
</script>

<style>
    .card {
        border-radius: 10px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .card:hover {
            transform: scale(1.02);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

    .btn-success {
        background-color: #27ae60;
        border: none;
        font-weight: bold;
    }

        .btn-success:hover {
            background-color: #1e8449;
        }

    .btn-secondary {
        background-color: #95a5a6;
        border: none;
        font-weight: bold;
    }

        .btn-secondary:hover {
            background-color: #7f8c8d;
        }
</style>
